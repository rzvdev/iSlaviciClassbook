using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.VisualStyles;

namespace iSlavici.Utility
{
    public class DGVimageButtonEditColumn : DataGridViewButtonColumn
    {
        public DGVimageButtonEditColumn()
        {
            CellTemplate = new DataGridViewImageEditCell();
        }
    }

    public class DataGridViewImageEditCell : DataGridViewImageButtonCell
    {
        public override void LoadImages()
        {
            // The normal Save image
            byte[] normalArray = IconToBytes(Properties.Resources.dgvUserListEditBtn_24px);

            MemoryStream msNormal = new MemoryStream(normalArray);
            _buttonImageNormal = Image.FromStream(msNormal);

            // The hot Save image
            byte[] hotArray = new byte[]
            {
            0x42, 0x4D, 0x36, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28,
            0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x0B, 0x00, 0x00, 0x12, 0x0B, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x79, 0x3A, 0x0F,
            0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F,
            0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F,
            0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0xFF, 0x00, 0xFF, 0x79, 0x3A, 0x0F,
            0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11, 0xA0, 0x77, 0x48, 0x9D, 0xA0, 0x9F, 0x4D, 0x28, 0x05,
            0x4D, 0x28, 0x05, 0xFB, 0xFE, 0xFF, 0xE5, 0xE2, 0xE7, 0xC5, 0xBC, 0xBF, 0x9D, 0xA0, 0x9F,
            0x4D, 0x28, 0x05, 0x72, 0x4C, 0x03, 0xA0, 0x77, 0x48, 0xA0, 0x45, 0x11, 0x79, 0x3A, 0x0F,
            0x79, 0x3A, 0x0F, 0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11, 0xA0, 0x77, 0x48, 0x9C, 0x9E, 0x9C,
            0x4D, 0x28, 0x05, 0x6C, 0x40, 0x01, 0xFB, 0xFE, 0xFF, 0xFB, 0xFE, 0xFF, 0xE5, 0xE2, 0xE7,
            0xC5, 0xBC, 0xBF, 0x4D, 0x28, 0x05, 0x72, 0x4C, 0x03, 0xA0, 0x77, 0x48, 0xA0, 0x45, 0x11,
            0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11, 0xA0, 0x77, 0x48,
            0xA7, 0xAA, 0xA7, 0x4D, 0x28, 0x05, 0x6C, 0x3C, 0x02, 0xFB, 0xFE, 0xFF, 0xF0, 0xF3, 0xF8,
            0xFB, 0xFB, 0xFB, 0xE5, 0xE2, 0xE7, 0x4D, 0x28, 0x05, 0x72, 0x4C, 0x03, 0xA0, 0x77, 0x48,
            0xA0, 0x45, 0x11, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11,
            0xA0, 0x77, 0x48, 0xC5, 0xCA, 0xCA, 0x4D, 0x28, 0x05, 0x4D, 0x28, 0x05, 0xFB, 0xFE, 0xFF,
            0xF0, 0xF3, 0xF8, 0xF0, 0xF3, 0xF8, 0xFF, 0xFF, 0xFF, 0x4D, 0x28, 0x05, 0x72, 0x4C, 0x03,
            0xA0, 0x77, 0x48, 0xA0, 0x45, 0x11, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0xA0, 0x45, 0x11,
            0xA0, 0x45, 0x11, 0x86, 0x39, 0x0D, 0xA0, 0x77, 0x48, 0xA0, 0x77, 0x48, 0xA0, 0x77, 0x48,
            0xA0, 0x77, 0x48, 0xA0, 0x77, 0x48, 0xA0, 0x77, 0x48, 0xA0, 0x77, 0x48, 0xA0, 0x77, 0x48,
            0xA0, 0x77, 0x48, 0x86, 0x39, 0x0D, 0xA0, 0x45, 0x11, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F,
            0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11,
            0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11,
            0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11, 0xA0, 0x45, 0x11, 0x79, 0x3A, 0x0F,
            0x79, 0x3A, 0x0F, 0xA0, 0x45, 0x11, 0xAB, 0x60, 0x30, 0xCA, 0xBD, 0xAF, 0xCA, 0xBD, 0xAF,
            0xCA, 0xBD, 0xAF, 0xCA, 0xBD, 0xAF, 0xCA, 0xBD, 0xAF, 0xCA, 0xBD, 0xAF, 0xCA, 0xBD, 0xAF,
            0xCA, 0xBD, 0xAF, 0xCA, 0xBD, 0xAF, 0xCA, 0xBD, 0xAF, 0xAB, 0x60, 0x30, 0xA0, 0x45, 0x11,
            0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0xA0, 0x45, 0x11, 0xCA, 0xBD, 0xAF, 0xDD, 0xE1, 0xE5,
            0xE0, 0xE1, 0xE1, 0xE6, 0xE7, 0xE7, 0xEA, 0xEB, 0xEB, 0xED, 0xEE, 0xEE, 0xEE, 0xEE, 0xEF,
            0xEB, 0xED, 0xED, 0xE9, 0xE9, 0xEA, 0xE2, 0xE2, 0xE3, 0xDC, 0xDD, 0xDE, 0xCA, 0xBD, 0xAF,
            0xA0, 0x45, 0x11, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0xA0, 0x45, 0x11, 0xCA, 0xBD, 0xAF,
            0xE1, 0xE3, 0xE7, 0xA3, 0xA3, 0xA4, 0xA3, 0xA3, 0xA4, 0xA3, 0xA3, 0xA4, 0xA3, 0xA3, 0xA4,
            0xA3, 0xA3, 0xA4, 0xA3, 0xA3, 0xA4, 0xA3, 0xA3, 0xA4, 0xA3, 0xA3, 0xA4, 0xE1, 0xE2, 0xE3,
            0xCA, 0xBD, 0xAF, 0xA0, 0x45, 0x11, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0xA0, 0x45, 0x11,
            0xCA, 0xBD, 0xAF, 0xE1, 0xE3, 0xE6, 0xE6, 0xE6, 0xE6, 0xEB, 0xEB, 0xEB, 0xF2, 0xF2, 0xF2,
            0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF3, 0xF3, 0xF3, 0xEF, 0xEF, 0xEF, 0xE9, 0xE9, 0xE9,
            0xE2, 0xE2, 0xE3, 0xCA, 0xBD, 0xAF, 0xA0, 0x45, 0x11, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F,
            0xA0, 0x45, 0x11, 0xCA, 0xBD, 0xAF, 0xE3, 0xE6, 0xEA, 0xA3, 0xA3, 0xA4, 0xA3, 0xA3, 0xA4,
            0xA3, 0xA3, 0xA4, 0xA3, 0xA3, 0xA4, 0xA3, 0xA3, 0xA4, 0xA3, 0xA3, 0xA4, 0xA3, 0xA3, 0xA4,
            0xA3, 0xA3, 0xA4, 0xE3, 0xE5, 0xE6, 0xCA, 0xBD, 0xAF, 0xA0, 0x45, 0x11, 0x79, 0x3A, 0x0F,
            0x79, 0x3A, 0x0F, 0xA0, 0x45, 0x11, 0xCA, 0xBD, 0xAF, 0xE2, 0xE3, 0xE6, 0xE7, 0xE7, 0xE6,
            0xED, 0xED, 0xEB, 0xF2, 0xF2, 0xEF, 0xF4, 0xF4, 0xF2, 0xF6, 0xF6, 0xF3, 0xF3, 0xF3, 0xF2,
            0xEF, 0xEF, 0xEE, 0xE9, 0xE9, 0xE7, 0xE2, 0xE3, 0xE2, 0xCA, 0xBD, 0xAF, 0xA0, 0x45, 0x11,
            0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0xA0, 0x45, 0x11, 0x1A, 0x1B, 0x89, 0x1A, 0x1B, 0x89,
            0x1A, 0x1B, 0x89, 0x1A, 0x1B, 0x89, 0x1A, 0x1B, 0x89, 0x1A, 0x1B, 0x89, 0x1A, 0x1B, 0x89,
            0x1A, 0x1B, 0x89, 0x1A, 0x1B, 0x89, 0x1A, 0x1B, 0x89, 0x1A, 0x1B, 0x89, 0x1A, 0x1B, 0x89,
            0xA0, 0x45, 0x11, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0xA0, 0x45, 0x11, 0x1A, 0x1B, 0x89,
            0x1B, 0x1D, 0xAA, 0x1B, 0x1D, 0xAA, 0x1B, 0x1D, 0xAA, 0x1B, 0x1D, 0xAA, 0x1B, 0x1D, 0xAA,
            0x1B, 0x1D, 0xAA, 0x1B, 0x1D, 0xAA, 0x1B, 0x1D, 0xAA, 0x1B, 0x1D, 0xAA, 0x1B, 0x1D, 0xAA,
            0x1A, 0x1B, 0x89, 0xA0, 0x45, 0x11, 0x79, 0x3A, 0x0F, 0xFF, 0x00, 0xFF, 0x79, 0x3A, 0x0F,
            0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F,
            0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F,
            0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0x79, 0x3A, 0x0F, 0xFF, 0x00, 0xFF
            };

            MemoryStream msHot = new MemoryStream(hotArray);
            _buttonImageHot = Image.FromStream(msHot);
        }

        public static byte[] IconToBytes(Image img)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                img.Save(ms, img.RawFormat);
                return ms.ToArray();
            }
        }
    }

    public abstract class DataGridViewImageButtonCell : DataGridViewButtonCell
    {
        private bool _enabled;
        private PushButtonState _buttonState;
        protected Image _buttonImageHot;
        protected Image _buttonImageNormal;
        private int _buttonImageOffset;

        protected DataGridViewImageButtonCell()
        {
            // In my project, buttons are disabled by default
            _enabled = false;
            _buttonState = PushButtonState.Disabled;

            // Changing this value affects the appearance of the image on the button.
            _buttonImageOffset = 2;

            // Call the routine to load the images specific to a column.
            LoadImages();
        }

        // Button Enabled Property
        public bool Enabled
        {
            get
            {
                return _enabled;
            }

            set
            {
                _enabled = value;
                _buttonState = value ? PushButtonState.Normal : PushButtonState.Disabled;
            }
        }

        // PushButton State Property
        public PushButtonState ButtonState
        {
            get { return _buttonState; }
            set { _buttonState = value; }
        }

        // Image Property
        // Returns the correct image based on the control's state.
        public Image ButtonImage
        {
            get
            {
                switch (_buttonState)
                {

                    case PushButtonState.Hot:
                        return _buttonImageHot;

                    case PushButtonState.Normal:
                        return _buttonImageNormal;

                    case PushButtonState.Pressed:
                        return _buttonImageNormal;

                    case PushButtonState.Default:
                        return _buttonImageNormal;

                    default:
                        return _buttonImageNormal;
                }
            }
        }

        protected override void Paint(Graphics graphics,
            Rectangle clipBounds, Rectangle cellBounds, int rowIndex,
            DataGridViewElementStates elementState, object value,
            object formattedValue, string errorText,
            DataGridViewCellStyle cellStyle,
            DataGridViewAdvancedBorderStyle advancedBorderStyle,
            DataGridViewPaintParts paintParts)
        {
            //base.Paint(graphics, clipBounds, cellBounds, rowIndex, elementState, value, formattedValue, errorText, cellStyle, advancedBorderStyle, paintParts);

            // Draw the cell background, if specified.
            if ((paintParts & DataGridViewPaintParts.Background) ==
                DataGridViewPaintParts.Background)
            {
                SolidBrush cellBackground =
                    new SolidBrush(cellStyle.BackColor);
                graphics.FillRectangle(cellBackground, cellBounds);
                cellBackground.Dispose();
            }

            // Draw the cell borders, if specified.
            if ((paintParts & DataGridViewPaintParts.Border) ==
                DataGridViewPaintParts.Border)
            {
                PaintBorder(graphics, clipBounds, cellBounds, cellStyle,
                    advancedBorderStyle);
            }

            // Calculate the area in which to draw the button.
            // Adjusting the following algorithm and values affects
            // how the image will appear on the button.
            Rectangle buttonArea = cellBounds;

            Rectangle buttonAdjustment =
                BorderWidths(advancedBorderStyle);

            buttonArea.X += buttonAdjustment.X;
            buttonArea.Y += buttonAdjustment.Y;
            buttonArea.Height -= buttonAdjustment.Height;
            buttonArea.Width -= buttonAdjustment.Width;

            Rectangle imageArea = new Rectangle(
                buttonArea.X + _buttonImageOffset,
                buttonArea.Y + _buttonImageOffset,
                16,
                16);

            ButtonRenderer.DrawButton(graphics, buttonArea, ButtonImage, imageArea, false, ButtonState);
        }

        public abstract void LoadImages();
    }
}
